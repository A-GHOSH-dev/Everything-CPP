// Longest Common Subsequence
// Given two sequences, find the length of longest subsequence present in both of them. Both the strings are of uppercase.
// Input:
// A = 6, B = 6
// str1 = ABCDGH
// str2 = AEDFHR
// Output: 3
// Explanation: LCS for input Sequences
// “ABCDGH” and “AEDFHR” is “ADH” of
// length 3.


#include<bits/stdc++.h>
const int mod=1e9+7;
using namespace std;


class Solution
{
    public:
    //Function to find the length of longest common subsequence in two strings.
    int lcs(int len1, int len2, string text1, string text2)
    {
        // your code here
        int dp[len1+1][len2+1];

            for(int i=0;i<=len1;i++)
                dp[i][0] = 0;

            for(int i=0;i<=len2;i++)
                dp[0][i] = 0;

            for(int i=1;i<=len1;i++){
                for(int j=1;j<=len2;j++){
                    if(text1[i-1]==text2[j-1])
                        dp[i][j] = 1+dp[i-1][j-1]; // diagonal waale element ko badha rhe h hai
                    else
                        dp[i][j] = max(dp[i-1][j], dp[i][j-1]); // else max of upar waala or side waala
                }
            }

            return dp[len1][len2];
        
    }
};



int main()
{
    int t,n,k,x,y;
    cin>>t;
    while(t--)
    {
        cin>>x>>y;          // Take size of both the strings as input
        string s1,s2;
        cin>>s1>>s2;        // Take both the string as input
        Solution ob;
        cout << ob.lcs(x, y, s1, s2) << endl;
    }
    return 0;
}
